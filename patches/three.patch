diff --git a/build/three.cjs b/build/three.cjs
index 7f565f9f53575a26fcb3b7a572f49d29408963b6..d992862ec8cce5741b2eab9497f1f2972f1c7797 100644
--- a/build/three.cjs
+++ b/build/three.cjs
@@ -12629,10 +12629,10 @@ class WebGLShaderCache {
 		this.materialCache = new Map();
 	}
 	update(material) {
-		const vertexShader = material.vertexShader;
-		const fragmentShader = material.fragmentShader;
-		const vertexShaderStage = this._getShaderStage(vertexShader);
-		const fragmentShaderStage = this._getShaderStage(fragmentShader);
+		const vertexShaderKey = material.vertexShaderKey != undefined ? material.vertexShaderKey : material.vertexShader;
+		const fragmentShaderKey = material.fragmentShaderKey != undefined ? material.fragmentShaderKey : material.fragmentShader;
+		const vertexShaderStage = this._getShaderStage(vertexShaderKey, material.vertexShader);
+		const fragmentShaderStage = this._getShaderStage(fragmentShaderKey, material.fragmentShader);
 		const materialShaders = this._getShaderCacheForMaterial(material);
 		if (materialShaders.has(vertexShaderStage) === false) {
 			materialShaders.add(vertexShaderStage);
@@ -12654,10 +12654,12 @@ class WebGLShaderCache {
 		return this;
 	}
 	getVertexShaderID(material) {
-		return this._getShaderStage(material.vertexShader).id;
+		const vertexShaderKey = material.vertexShaderKey != undefined ? material.vertexShaderKey : material.vertexShader;
+		return this._getShaderStage(vertexShaderKey, material.vertexShader).id;
 	}
 	getFragmentShaderID(material) {
-		return this._getShaderStage(material.fragmentShader).id;
+		const fragmentShaderKey = material.fragmentShaderKey != undefined ? material.fragmentShaderKey : material.fragmentShader;
+		return this._getShaderStage(fragmentShaderKey, material.fragmentShader).id;
 	}
 	dispose() {
 		this.shaderCache.clear();
diff --git a/build/three.js b/build/three.js
index d305cc33de1513783e8609998f3857a1be787091..a4f8b4a7d8c728443fb08e2674e4b1fcc0e39ea8 100644
--- a/build/three.js
+++ b/build/three.js
@@ -12631,10 +12631,10 @@
 			this.materialCache = new Map();
 		}
 		update(material) {
-			const vertexShader = material.vertexShader;
-			const fragmentShader = material.fragmentShader;
-			const vertexShaderStage = this._getShaderStage(vertexShader);
-			const fragmentShaderStage = this._getShaderStage(fragmentShader);
+			const vertexShaderKey = material.vertexShaderKey != undefined ? material.vertexShaderKey : material.vertexShader;
+			const fragmentShaderKey = material.fragmentShaderKey != undefined ? material.fragmentShaderKey : material.fragmentShader;
+			const vertexShaderStage = this._getShaderStage(vertexShaderKey, material.vertexShader);
+			const fragmentShaderStage = this._getShaderStage(fragmentShaderKey, material.fragmentShader);
 			const materialShaders = this._getShaderCacheForMaterial(material);
 			if (materialShaders.has(vertexShaderStage) === false) {
 				materialShaders.add(vertexShaderStage);
@@ -12656,10 +12656,12 @@
 			return this;
 		}
 		getVertexShaderID(material) {
-			return this._getShaderStage(material.vertexShader).id;
+			const vertexShaderKey = material.vertexShaderKey != undefined ? material.vertexShaderKey : material.vertexShader;
+			return this._getShaderStage(vertexShaderKey, material.vertexShader).id;
 		}
 		getFragmentShaderID(material) {
-			return this._getShaderStage(material.fragmentShader).id;
+			const fragmentShaderKey = material.fragmentShaderKey != undefined ? material.fragmentShaderKey : material.fragmentShader;
+			return this._getShaderStage(fragmentShaderKey, material.fragmentShader).id;
 		}
 		dispose() {
 			this.shaderCache.clear();
diff --git a/build/three.module.js b/build/three.module.js
index f0d3a81f53e7dc92ca3c3647fbe97dba537aec30..325836fca9d291c73445ff8a4baaeab6ad41e5a1 100644
--- a/build/three.module.js
+++ b/build/three.module.js
@@ -19126,32 +19126,21 @@ class WebGLShaderCache {
 
 	}
 
-	update( material ) {
-
-		const vertexShader = material.vertexShader;
-		const fragmentShader = material.fragmentShader;
-
-		const vertexShaderStage = this._getShaderStage( vertexShader );
-		const fragmentShaderStage = this._getShaderStage( fragmentShader );
-
-		const materialShaders = this._getShaderCacheForMaterial( material );
-
-		if ( materialShaders.has( vertexShaderStage ) === false ) {
-
-			materialShaders.add( vertexShaderStage );
-			vertexShaderStage.usedTimes ++;
-
+	update(material) {
+		const vertexShaderKey = material.vertexShaderKey != undefined ? material.vertexShaderKey : material.vertexShader;
+		const fragmentShaderKey = material.fragmentShaderKey != undefined ? material.fragmentShaderKey : material.fragmentShader;
+		const vertexShaderStage = this._getShaderStage(vertexShaderKey, material.vertexShader);
+		const fragmentShaderStage = this._getShaderStage(fragmentShaderKey, material.fragmentShader);
+		const materialShaders = this._getShaderCacheForMaterial(material);
+		if (materialShaders.has(vertexShaderStage) === false) {
+			materialShaders.add(vertexShaderStage);
+			vertexShaderStage.usedTimes++;
 		}
-
-		if ( materialShaders.has( fragmentShaderStage ) === false ) {
-
-			materialShaders.add( fragmentShaderStage );
-			fragmentShaderStage.usedTimes ++;
-
+		if (materialShaders.has(fragmentShaderStage) === false) {
+			materialShaders.add(fragmentShaderStage);
+			fragmentShaderStage.usedTimes++;
 		}
-
 		return this;
-
 	}
 
 	remove( material ) {
@@ -19172,16 +19161,13 @@ class WebGLShaderCache {
 
 	}
 
-	getVertexShaderID( material ) {
-
-		return this._getShaderStage( material.vertexShader ).id;
-
+	getVertexShaderID(material) {
+		const vertexShaderKey = material.vertexShaderKey != undefined ? material.vertexShaderKey : material.vertexShader;
+		return this._getShaderStage(vertexShaderKey, material.vertexShader).id;
 	}
-
-	getFragmentShaderID( material ) {
-
-		return this._getShaderStage( material.fragmentShader ).id;
-
+	getFragmentShaderID(material) {
+		const fragmentShaderKey = material.fragmentShaderKey != undefined ? material.fragmentShaderKey : material.fragmentShader;
+		return this._getShaderStage(fragmentShaderKey, material.fragmentShader).id;
 	}
 
 	dispose() {
diff --git a/src/renderers/webgl/WebGLShaderCache.js b/src/renderers/webgl/WebGLShaderCache.js
index 4e0fffcbb035c5229f3eb9672ba3b129db78df89..5292dcb4fdd1dc349d2579da6d398c11223ff2a3 100644
--- a/src/renderers/webgl/WebGLShaderCache.js
+++ b/src/renderers/webgl/WebGLShaderCache.js
@@ -9,32 +9,21 @@ class WebGLShaderCache {
 
 	}
 
-	update( material ) {
-
-		const vertexShader = material.vertexShader;
-		const fragmentShader = material.fragmentShader;
-
-		const vertexShaderStage = this._getShaderStage( vertexShader );
-		const fragmentShaderStage = this._getShaderStage( fragmentShader );
-
-		const materialShaders = this._getShaderCacheForMaterial( material );
-
-		if ( materialShaders.has( vertexShaderStage ) === false ) {
-
-			materialShaders.add( vertexShaderStage );
-			vertexShaderStage.usedTimes ++;
-
+	update(material) {
+		const vertexShaderKey = material.vertexShaderKey != undefined ? material.vertexShaderKey : material.vertexShader;
+		const fragmentShaderKey = material.fragmentShaderKey != undefined ? material.fragmentShaderKey : material.fragmentShader;
+		const vertexShaderStage = this._getShaderStage(vertexShaderKey, material.vertexShader);
+		const fragmentShaderStage = this._getShaderStage(fragmentShaderKey, material.fragmentShader);
+		const materialShaders = this._getShaderCacheForMaterial(material);
+		if (materialShaders.has(vertexShaderStage) === false) {
+			materialShaders.add(vertexShaderStage);
+			vertexShaderStage.usedTimes++;
 		}
-
-		if ( materialShaders.has( fragmentShaderStage ) === false ) {
-
-			materialShaders.add( fragmentShaderStage );
-			fragmentShaderStage.usedTimes ++;
-
+		if (materialShaders.has(fragmentShaderStage) === false) {
+			materialShaders.add(fragmentShaderStage);
+			fragmentShaderStage.usedTimes++;
 		}
-
 		return this;
-
 	}
 
 	remove( material ) {
@@ -55,16 +44,13 @@ class WebGLShaderCache {
 
 	}
 
-	getVertexShaderID( material ) {
-
-		return this._getShaderStage( material.vertexShader ).id;
-
+	getVertexShaderID(material) {
+		const vertexShaderKey = material.vertexShaderKey != undefined ? material.vertexShaderKey : material.vertexShader;
+		return this._getShaderStage(vertexShaderKey, material.vertexShader).id;
 	}
-
-	getFragmentShaderID( material ) {
-
-		return this._getShaderStage( material.fragmentShader ).id;
-
+	getFragmentShaderID(material) {
+		const fragmentShaderKey = material.fragmentShaderKey != undefined ? material.fragmentShaderKey : material.fragmentShader;
+		return this._getShaderStage(fragmentShaderKey, material.fragmentShader).id;
 	}
 
 	dispose() {
