// SPDX-FileCopyrightText: Copyright (C) 2022-2024 Shanghai coScene Information Technology Co., Ltd.<hi@coscene.io>
// SPDX-License-Identifier: MPL-2.0

// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/* eslint-disable */
/**
 * coConnect API
 * coConnect API Service
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from "./base";

/**
 *
 * @export
 * @interface CreateDevicePortForwardingRequest
 */
export interface CreateDevicePortForwardingRequest {
  /**
   *
   * @type {number}
   * @memberof CreateDevicePortForwardingRequest
   */
  device_port: number;
}
/**
 *
 * @export
 * @interface DevicePortForwarding
 */
export interface DevicePortForwarding {
  /**
   *
   * @type {number}
   * @memberof DevicePortForwarding
   */
  server_port: number;
  /**
   *
   * @type {number}
   * @memberof DevicePortForwarding
   */
  device_port: number;
  /**
   *
   * @type {string}
   * @memberof DevicePortForwarding
   */
  created_at: string;
}
/**
 *
 * @export
 * @interface DeviceResponse
 */
export interface DeviceResponse {
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  publicKey: string;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  hostname?: string;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  public_ip?: string;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  private_ip?: string;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  network_id: string;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  updated_at: string;
  /**
   *
   * @type {boolean}
   * @memberof DeviceResponse
   */
  enabled: boolean;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  alias?: string;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  external_id?: string;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  mac_address?: string;
  /**
   *
   * @type {number}
   * @memberof DeviceResponse
   */
  ssh_port: number;
  /**
   *
   * @type {number}
   * @memberof DeviceResponse
   */
  control_port: number;
  /**
   *
   * @type {string}
   * @memberof DeviceResponse
   */
  last_active_at?: string;
  /**
   *
   * @type {number}
   * @memberof DeviceResponse
   */
  rx_bytes?: number;
  /**
   *
   * @type {number}
   * @memberof DeviceResponse
   */
  tx_bytes?: number;
  /**
   *
   * @type {number}
   * @memberof DeviceResponse
   */
  report_network_interval_secs?: number;
  /**
   *
   * @type {number}
   * @memberof DeviceResponse
   */
  report_disk_interval_secs?: number;
  /**
   *
   * @type {number}
   * @memberof DeviceResponse
   */
  report_memory_interval_secs?: number;
  /**
   *
   * @type {number}
   * @memberof DeviceResponse
   */
  report_cpu_interval_secs?: number;
}
/**
 *
 * @export
 * @interface DeviceSystemInfoResponse
 */
export interface DeviceSystemInfoResponse {
  /**
   *
   * @type {string}
   * @memberof DeviceSystemInfoResponse
   */
  network_id: string;
  /**
   *
   * @type {string}
   * @memberof DeviceSystemInfoResponse
   */
  public_key: string;
  /**
   *
   * @type {string}
   * @memberof DeviceSystemInfoResponse
   */
  machine_id?: string;
  /**
   *
   * @type {number}
   * @memberof DeviceSystemInfoResponse
   */
  used_memory?: number;
  /**
   *
   * @type {number}
   * @memberof DeviceSystemInfoResponse
   */
  total_memory?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof DeviceSystemInfoResponse
   */
  cpu_usage?: Array<number>;
  /**
   *
   * @type {Array<DiskUsage>}
   * @memberof DeviceSystemInfoResponse
   */
  disks?: Array<DiskUsage>;
  /**
   *
   * @type {number}
   * @memberof DeviceSystemInfoResponse
   */
  tx_bytes?: number;
  /**
   *
   * @type {number}
   * @memberof DeviceSystemInfoResponse
   */
  rx_bytes?: number;
  /**
   *
   * @type {string}
   * @memberof DeviceSystemInfoResponse
   */
  first_accept_at?: string;
  /**
   *
   * @type {string}
   * @memberof DeviceSystemInfoResponse
   */
  last_online_at?: string;
  /**
   *
   * @type {string}
   * @memberof DeviceSystemInfoResponse
   */
  last_handshake_at?: string;
  /**
   *
   * @type {string}
   * @memberof DeviceSystemInfoResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof DeviceSystemInfoResponse
   */
  updated_at: string;
}
/**
 *
 * @export
 * @interface DiskUsage
 */
export interface DiskUsage {
  /**
   *
   * @type {string}
   * @memberof DiskUsage
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof DiskUsage
   */
  total_space: number;
  /**
   *
   * @type {number}
   * @memberof DiskUsage
   */
  available_space: number;
}
/**
 *
 * @export
 * @interface GetBatchRemoteCommandRecordResponse
 */
export interface GetBatchRemoteCommandRecordResponse {
  /**
   *
   * @type {string}
   * @memberof GetBatchRemoteCommandRecordResponse
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof GetBatchRemoteCommandRecordResponse
   */
  network_id: string;
  /**
   *
   * @type {string}
   * @memberof GetBatchRemoteCommandRecordResponse
   */
  cmd: string;
  /**
   *
   * @type {string}
   * @memberof GetBatchRemoteCommandRecordResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof GetBatchRemoteCommandRecordResponse
   */
  updated_at: string;
}
/**
 *
 * @export
 * @interface GetBatchRemoteCommandResponse
 */
export interface GetBatchRemoteCommandResponse {
  /**
   *
   * @type {string}
   * @memberof GetBatchRemoteCommandResponse
   */
  cmd: string;
  /**
   *
   * @type {Array<GetRemoteCommandStatusResponse>}
   * @memberof GetBatchRemoteCommandResponse
   */
  commands: Array<GetRemoteCommandStatusResponse>;
}
/**
 *
 * @export
 * @interface GetRemoteCommandStatusResponse
 */
export interface GetRemoteCommandStatusResponse {
  /**
   *
   * @type {string}
   * @memberof GetRemoteCommandStatusResponse
   */
  id: string;
  /**
   *
   * @type {object}
   * @memberof GetRemoteCommandStatusResponse
   */
  batch_id?: object;
  /**
   *
   * @type {string}
   * @memberof GetRemoteCommandStatusResponse
   */
  network_id: string;
  /**
   *
   * @type {string}
   * @memberof GetRemoteCommandStatusResponse
   */
  public_key: string;
  /**
   *
   * @type {object}
   * @memberof GetRemoteCommandStatusResponse
   */
  log_size?: object;
  /**
   *
   * @type {string}
   * @memberof GetRemoteCommandStatusResponse
   */
  cmd: string;
  /**
   *
   * @type {object}
   * @memberof GetRemoteCommandStatusResponse
   */
  error?: object;
  /**
   *
   * @type {boolean}
   * @memberof GetRemoteCommandStatusResponse
   */
  started: boolean;
  /**
   *
   * @type {object}
   * @memberof GetRemoteCommandStatusResponse
   */
  started_at?: object;
  /**
   *
   * @type {boolean}
   * @memberof GetRemoteCommandStatusResponse
   */
  completed: boolean;
  /**
   *
   * @type {object}
   * @memberof GetRemoteCommandStatusResponse
   */
  completed_at?: object;
  /**
   *
   * @type {object}
   * @memberof GetRemoteCommandStatusResponse
   */
  exit_code?: object;
  /**
   *
   * @type {boolean}
   * @memberof GetRemoteCommandStatusResponse
   */
  pruned_from_device: boolean;
  /**
   *
   * @type {string}
   * @memberof GetRemoteCommandStatusResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof GetRemoteCommandStatusResponse
   */
  updated_at: string;
}
/**
 *
 * @export
 * @interface KillRemoteCommandRequest
 */
export interface KillRemoteCommandRequest {
  /**
   *
   * @type {string}
   * @memberof KillRemoteCommandRequest
   */
  signal: KillRemoteCommandRequestSignalEnum;
}

export const KillRemoteCommandRequestSignalEnum = {
  Sigterm: "SIGTERM",
  Sigkill: "SIGKILL",
  Sigint: "SIGINT",
} as const;

export type KillRemoteCommandRequestSignalEnum =
  (typeof KillRemoteCommandRequestSignalEnum)[keyof typeof KillRemoteCommandRequestSignalEnum];

/**
 *
 * @export
 * @interface ListBatchRemoteCommandsResponse
 */
export interface ListBatchRemoteCommandsResponse {
  /**
   *
   * @type {number}
   * @memberof ListBatchRemoteCommandsResponse
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof ListBatchRemoteCommandsResponse
   */
  page_size: number;
  /**
   *
   * @type {number}
   * @memberof ListBatchRemoteCommandsResponse
   */
  total: number;
  /**
   *
   * @type {Array<GetBatchRemoteCommandRecordResponse>}
   * @memberof ListBatchRemoteCommandsResponse
   */
  commands: Array<GetBatchRemoteCommandRecordResponse>;
}
/**
 *
 * @export
 * @interface ListRemoteCommandsResponse
 */
export interface ListRemoteCommandsResponse {
  /**
   *
   * @type {number}
   * @memberof ListRemoteCommandsResponse
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof ListRemoteCommandsResponse
   */
  page_size: number;
  /**
   *
   * @type {number}
   * @memberof ListRemoteCommandsResponse
   */
  total: number;
  /**
   *
   * @type {Array<GetRemoteCommandStatusResponse>}
   * @memberof ListRemoteCommandsResponse
   */
  commands: Array<GetRemoteCommandStatusResponse>;
}
/**
 *
 * @export
 * @interface PatchDeviceProperties
 */
export interface PatchDeviceProperties {
  /**
   *
   * @type {string}
   * @memberof PatchDeviceProperties
   */
  external_id?: string;
  /**
   *
   * @type {string}
   * @memberof PatchDeviceProperties
   */
  alias?: string;
  /**
   *
   * @type {number}
   * @memberof PatchDeviceProperties
   */
  heartbeat_interval_secs?: number;
  /**
   *
   * @type {number}
   * @memberof PatchDeviceProperties
   */
  report_cpu_interval_secs?: number;
  /**
   *
   * @type {number}
   * @memberof PatchDeviceProperties
   */
  report_memory_interval_secs?: number;
  /**
   *
   * @type {number}
   * @memberof PatchDeviceProperties
   */
  report_disk_interval_secs?: number;
  /**
   *
   * @type {number}
   * @memberof PatchDeviceProperties
   */
  report_network_interval_secs?: number;
}
/**
 *
 * @export
 * @interface PatchDeviceRequest
 */
export interface PatchDeviceRequest {
  /**
   *
   * @type {PatchDeviceProperties}
   * @memberof PatchDeviceRequest
   */
  device: PatchDeviceProperties;
  /**
   *
   * @type {Array<string>}
   * @memberof PatchDeviceRequest
   */
  fields: Array<PatchDeviceRequestFieldsEnum>;
}

export const PatchDeviceRequestFieldsEnum = {
  ExternalId: "external_id",
  Alias: "alias",
  HeartbeatIntervalSecs: "heartbeat_interval_secs",
  ReportCpuIntervalSecs: "report_cpu_interval_secs",
  ReportMemoryIntervalSecs: "report_memory_interval_secs",
  ReportDiskIntervalSecs: "report_disk_interval_secs",
  ReportNetworkIntervalSecs: "report_network_interval_secs",
} as const;

export type PatchDeviceRequestFieldsEnum =
  (typeof PatchDeviceRequestFieldsEnum)[keyof typeof PatchDeviceRequestFieldsEnum];

/**
 *
 * @export
 * @interface StartBatchRemoteCommandsRequest
 */
export interface StartBatchRemoteCommandsRequest {
  /**
   *
   * @type {string}
   * @memberof StartBatchRemoteCommandsRequest
   */
  command: string;
  /**
   *
   * @type {Array<string>}
   * @memberof StartBatchRemoteCommandsRequest
   */
  public_keys: Array<string>;
}
/**
 *
 * @export
 * @interface StartBatchRemoteCommandsResponse
 */
export interface StartBatchRemoteCommandsResponse {
  /**
   *
   * @type {string}
   * @memberof StartBatchRemoteCommandsResponse
   */
  batch_id: string;
  /**
   *
   * @type {Array<string>}
   * @memberof StartBatchRemoteCommandsResponse
   */
  command_ids: Array<string>;
}
/**
 *
 * @export
 * @interface StartRemoteCommandRequest
 */
export interface StartRemoteCommandRequest {
  /**
   *
   * @type {string}
   * @memberof StartRemoteCommandRequest
   */
  command: string;
}
/**
 *
 * @export
 * @interface StartRemoteCommandResponse
 */
export interface StartRemoteCommandResponse {
  /**
   *
   * @type {string}
   * @memberof StartRemoteCommandResponse
   */
  command_id: string;
}
/**
 *
 * @export
 * @interface StartWebTerminalResponse
 */
export interface StartWebTerminalResponse {
  /**
   *
   * @type {string}
   * @memberof StartWebTerminalResponse
   */
  terminal_id: string;
}

/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerAcceptDevice: async (
      networkId: string,
      publicKey: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerAcceptDevice", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerAcceptDevice", "publicKey", publicKey);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}:accept`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {CreateDevicePortForwardingRequest} createDevicePortForwardingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerCreateDevicePortForwarding: async (
      networkId: string,
      publicKey: string,
      createDevicePortForwardingRequest: CreateDevicePortForwardingRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerCreateDevicePortForwarding", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerCreateDevicePortForwarding", "publicKey", publicKey);
      // verify required parameter 'createDevicePortForwardingRequest' is not null or undefined
      assertParamExists(
        "deviceApiControllerCreateDevicePortForwarding",
        "createDevicePortForwardingRequest",
        createDevicePortForwardingRequest,
      );
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}/port-forwardings`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createDevicePortForwardingRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerDeleteDevice: async (
      networkId: string,
      publicKey: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerDeleteDevice", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerDeleteDevice", "publicKey", publicKey);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {number} devicePort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerDeleteDevicePortForwarding: async (
      networkId: string,
      publicKey: string,
      devicePort: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerDeleteDevicePortForwarding", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerDeleteDevicePortForwarding", "publicKey", publicKey);
      // verify required parameter 'devicePort' is not null or undefined
      assertParamExists("deviceApiControllerDeleteDevicePortForwarding", "devicePort", devicePort);
      const localVarPath =
        `/v1/networks/{networkId}/devices/{publicKey}/port-forwardings/{devicePort}`
          .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
          .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)))
          .replace(`{${"devicePort"}}`, encodeURIComponent(String(devicePort)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} batchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetBatchRemoteCommand: async (
      networkId: string,
      batchId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerGetBatchRemoteCommand", "networkId", networkId);
      // verify required parameter 'batchId' is not null or undefined
      assertParamExists("deviceApiControllerGetBatchRemoteCommand", "batchId", batchId);
      const localVarPath = `/v1/networks/{networkId}/batch-commands/{batchId}`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"batchId"}}`, encodeURIComponent(String(batchId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetDevice: async (
      networkId: string,
      publicKey: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerGetDevice", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerGetDevice", "publicKey", publicKey);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetDevicePortForwardings: async (
      networkId: string,
      publicKey: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerGetDevicePortForwardings", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerGetDevicePortForwardings", "publicKey", publicKey);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}/port-forwardings`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetDeviceSystemInfo: async (
      networkId: string,
      publicKey: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerGetDeviceSystemInfo", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerGetDeviceSystemInfo", "publicKey", publicKey);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}/system-info`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {string} commandId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetRemoteCommandStatus: async (
      networkId: string,
      publicKey: string,
      commandId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerGetRemoteCommandStatus", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerGetRemoteCommandStatus", "publicKey", publicKey);
      // verify required parameter 'commandId' is not null or undefined
      assertParamExists("deviceApiControllerGetRemoteCommandStatus", "commandId", commandId);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}/commands/{commandId}`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)))
        .replace(`{${"commandId"}}`, encodeURIComponent(String(commandId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {string} commandId
     * @param {KillRemoteCommandRequest} killRemoteCommandRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerKillRemoteCommand: async (
      networkId: string,
      publicKey: string,
      commandId: string,
      killRemoteCommandRequest: KillRemoteCommandRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerKillRemoteCommand", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerKillRemoteCommand", "publicKey", publicKey);
      // verify required parameter 'commandId' is not null or undefined
      assertParamExists("deviceApiControllerKillRemoteCommand", "commandId", commandId);
      // verify required parameter 'killRemoteCommandRequest' is not null or undefined
      assertParamExists(
        "deviceApiControllerKillRemoteCommand",
        "killRemoteCommandRequest",
        killRemoteCommandRequest,
      );
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}/commands/{commandId}:kill`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)))
        .replace(`{${"commandId"}}`, encodeURIComponent(String(commandId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        killRemoteCommandRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {number} [page] Optional page number
     * @param {number} [pageSize] Optional page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerListBatchRemoteCommands: async (
      networkId: string,
      page?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerListBatchRemoteCommands", "networkId", networkId);
      const localVarPath = `/v1/networks/{networkId}/batch-commands`.replace(
        `{${"networkId"}}`,
        encodeURIComponent(String(networkId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerListDevices: async (
      networkId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerListDevices", "networkId", networkId);
      const localVarPath = `/v1/networks/{networkId}/devices`.replace(
        `{${"networkId"}}`,
        encodeURIComponent(String(networkId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {number} [page] Optional page number
     * @param {number} [pageSize] Optional page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerListRemoteCommands: async (
      networkId: string,
      publicKey: string,
      page?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerListRemoteCommands", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerListRemoteCommands", "publicKey", publicKey);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}/commands`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {PatchDeviceRequest} patchDeviceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerPatchDevice: async (
      networkId: string,
      publicKey: string,
      patchDeviceRequest: PatchDeviceRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerPatchDevice", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerPatchDevice", "publicKey", publicKey);
      // verify required parameter 'patchDeviceRequest' is not null or undefined
      assertParamExists("deviceApiControllerPatchDevice", "patchDeviceRequest", patchDeviceRequest);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchDeviceRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerRejectDevice: async (
      networkId: string,
      publicKey: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerRejectDevice", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerRejectDevice", "publicKey", publicKey);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}:reject`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {StartBatchRemoteCommandsRequest} startBatchRemoteCommandsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerStartBatchRemoteCommands: async (
      networkId: string,
      startBatchRemoteCommandsRequest: StartBatchRemoteCommandsRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerStartBatchRemoteCommands", "networkId", networkId);
      // verify required parameter 'startBatchRemoteCommandsRequest' is not null or undefined
      assertParamExists(
        "deviceApiControllerStartBatchRemoteCommands",
        "startBatchRemoteCommandsRequest",
        startBatchRemoteCommandsRequest,
      );
      const localVarPath = `/v1/networks/{networkId}/batch-commands`.replace(
        `{${"networkId"}}`,
        encodeURIComponent(String(networkId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        startBatchRemoteCommandsRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {StartRemoteCommandRequest} startRemoteCommandRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerStartRemoteCommand: async (
      networkId: string,
      publicKey: string,
      startRemoteCommandRequest: StartRemoteCommandRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerStartRemoteCommand", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerStartRemoteCommand", "publicKey", publicKey);
      // verify required parameter 'startRemoteCommandRequest' is not null or undefined
      assertParamExists(
        "deviceApiControllerStartRemoteCommand",
        "startRemoteCommandRequest",
        startRemoteCommandRequest,
      );
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}:start-remote-command`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        startRemoteCommandRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerStartWebTerminal: async (
      networkId: string,
      publicKey: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'networkId' is not null or undefined
      assertParamExists("deviceApiControllerStartWebTerminal", "networkId", networkId);
      // verify required parameter 'publicKey' is not null or undefined
      assertParamExists("deviceApiControllerStartWebTerminal", "publicKey", publicKey);
      const localVarPath = `/v1/networks/{networkId}/devices/{publicKey}:start-web-terminal`
        .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
        .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerAcceptDevice(
      networkId: string,
      publicKey: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deviceApiControllerAcceptDevice(
        networkId,
        publicKey,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerAcceptDevice"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {CreateDevicePortForwardingRequest} createDevicePortForwardingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerCreateDevicePortForwarding(
      networkId: string,
      publicKey: string,
      createDevicePortForwardingRequest: CreateDevicePortForwardingRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DevicePortForwarding>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerCreateDevicePortForwarding(
          networkId,
          publicKey,
          createDevicePortForwardingRequest,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerCreateDevicePortForwarding"]?.[index]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerDeleteDevice(
      networkId: string,
      publicKey: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deviceApiControllerDeleteDevice(
        networkId,
        publicKey,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerDeleteDevice"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {number} devicePort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerDeleteDevicePortForwarding(
      networkId: string,
      publicKey: string,
      devicePort: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerDeleteDevicePortForwarding(
          networkId,
          publicKey,
          devicePort,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerDeleteDevicePortForwarding"]?.[index]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} batchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerGetBatchRemoteCommand(
      networkId: string,
      batchId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBatchRemoteCommandResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerGetBatchRemoteCommand(
          networkId,
          batchId,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerGetBatchRemoteCommand"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerGetDevice(
      networkId: string,
      publicKey: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deviceApiControllerGetDevice(
        networkId,
        publicKey,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerGetDevice"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerGetDevicePortForwardings(
      networkId: string,
      publicKey: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DevicePortForwarding>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerGetDevicePortForwardings(
          networkId,
          publicKey,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerGetDevicePortForwardings"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerGetDeviceSystemInfo(
      networkId: string,
      publicKey: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceSystemInfoResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerGetDeviceSystemInfo(
          networkId,
          publicKey,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerGetDeviceSystemInfo"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {string} commandId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerGetRemoteCommandStatus(
      networkId: string,
      publicKey: string,
      commandId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRemoteCommandStatusResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerGetRemoteCommandStatus(
          networkId,
          publicKey,
          commandId,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerGetRemoteCommandStatus"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {string} commandId
     * @param {KillRemoteCommandRequest} killRemoteCommandRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerKillRemoteCommand(
      networkId: string,
      publicKey: string,
      commandId: string,
      killRemoteCommandRequest: KillRemoteCommandRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerKillRemoteCommand(
          networkId,
          publicKey,
          commandId,
          killRemoteCommandRequest,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerKillRemoteCommand"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {number} [page] Optional page number
     * @param {number} [pageSize] Optional page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerListBatchRemoteCommands(
      networkId: string,
      page?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBatchRemoteCommandsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerListBatchRemoteCommands(
          networkId,
          page,
          pageSize,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerListBatchRemoteCommands"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerListDevices(
      networkId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceResponse>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deviceApiControllerListDevices(
        networkId,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerListDevices"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {number} [page] Optional page number
     * @param {number} [pageSize] Optional page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerListRemoteCommands(
      networkId: string,
      publicKey: string,
      page?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRemoteCommandsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerListRemoteCommands(
          networkId,
          publicKey,
          page,
          pageSize,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerListRemoteCommands"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {PatchDeviceRequest} patchDeviceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerPatchDevice(
      networkId: string,
      publicKey: string,
      patchDeviceRequest: PatchDeviceRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deviceApiControllerPatchDevice(
        networkId,
        publicKey,
        patchDeviceRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerPatchDevice"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerRejectDevice(
      networkId: string,
      publicKey: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deviceApiControllerRejectDevice(
        networkId,
        publicKey,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerRejectDevice"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {StartBatchRemoteCommandsRequest} startBatchRemoteCommandsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerStartBatchRemoteCommands(
      networkId: string,
      startBatchRemoteCommandsRequest: StartBatchRemoteCommandsRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartBatchRemoteCommandsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerStartBatchRemoteCommands(
          networkId,
          startBatchRemoteCommandsRequest,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerStartBatchRemoteCommands"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {StartRemoteCommandRequest} startRemoteCommandRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerStartRemoteCommand(
      networkId: string,
      publicKey: string,
      startRemoteCommandRequest: StartRemoteCommandRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartRemoteCommandResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deviceApiControllerStartRemoteCommand(
          networkId,
          publicKey,
          startRemoteCommandRequest,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerStartRemoteCommand"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deviceApiControllerStartWebTerminal(
      networkId: string,
      publicKey: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartWebTerminalResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deviceApiControllerStartWebTerminal(
        networkId,
        publicKey,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DevicesApi.deviceApiControllerStartWebTerminal"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DevicesApiFp(configuration);
  return {
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerAcceptDevice(
      networkId: string,
      publicKey: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deviceApiControllerAcceptDevice(networkId, publicKey, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {CreateDevicePortForwardingRequest} createDevicePortForwardingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerCreateDevicePortForwarding(
      networkId: string,
      publicKey: string,
      createDevicePortForwardingRequest: CreateDevicePortForwardingRequest,
      options?: any,
    ): AxiosPromise<DevicePortForwarding> {
      return localVarFp
        .deviceApiControllerCreateDevicePortForwarding(
          networkId,
          publicKey,
          createDevicePortForwardingRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerDeleteDevice(
      networkId: string,
      publicKey: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deviceApiControllerDeleteDevice(networkId, publicKey, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {number} devicePort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerDeleteDevicePortForwarding(
      networkId: string,
      publicKey: string,
      devicePort: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deviceApiControllerDeleteDevicePortForwarding(networkId, publicKey, devicePort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} batchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetBatchRemoteCommand(
      networkId: string,
      batchId: string,
      options?: any,
    ): AxiosPromise<GetBatchRemoteCommandResponse> {
      return localVarFp
        .deviceApiControllerGetBatchRemoteCommand(networkId, batchId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetDevice(
      networkId: string,
      publicKey: string,
      options?: any,
    ): AxiosPromise<DeviceResponse> {
      return localVarFp
        .deviceApiControllerGetDevice(networkId, publicKey, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetDevicePortForwardings(
      networkId: string,
      publicKey: string,
      options?: any,
    ): AxiosPromise<Array<DevicePortForwarding>> {
      return localVarFp
        .deviceApiControllerGetDevicePortForwardings(networkId, publicKey, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetDeviceSystemInfo(
      networkId: string,
      publicKey: string,
      options?: any,
    ): AxiosPromise<DeviceSystemInfoResponse> {
      return localVarFp
        .deviceApiControllerGetDeviceSystemInfo(networkId, publicKey, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {string} commandId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerGetRemoteCommandStatus(
      networkId: string,
      publicKey: string,
      commandId: string,
      options?: any,
    ): AxiosPromise<GetRemoteCommandStatusResponse> {
      return localVarFp
        .deviceApiControllerGetRemoteCommandStatus(networkId, publicKey, commandId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {string} commandId
     * @param {KillRemoteCommandRequest} killRemoteCommandRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerKillRemoteCommand(
      networkId: string,
      publicKey: string,
      commandId: string,
      killRemoteCommandRequest: KillRemoteCommandRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deviceApiControllerKillRemoteCommand(
          networkId,
          publicKey,
          commandId,
          killRemoteCommandRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {number} [page] Optional page number
     * @param {number} [pageSize] Optional page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerListBatchRemoteCommands(
      networkId: string,
      page?: number,
      pageSize?: number,
      options?: any,
    ): AxiosPromise<ListBatchRemoteCommandsResponse> {
      return localVarFp
        .deviceApiControllerListBatchRemoteCommands(networkId, page, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerListDevices(
      networkId: string,
      options?: any,
    ): AxiosPromise<Array<DeviceResponse>> {
      return localVarFp
        .deviceApiControllerListDevices(networkId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {number} [page] Optional page number
     * @param {number} [pageSize] Optional page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerListRemoteCommands(
      networkId: string,
      publicKey: string,
      page?: number,
      pageSize?: number,
      options?: any,
    ): AxiosPromise<ListRemoteCommandsResponse> {
      return localVarFp
        .deviceApiControllerListRemoteCommands(networkId, publicKey, page, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {PatchDeviceRequest} patchDeviceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerPatchDevice(
      networkId: string,
      publicKey: string,
      patchDeviceRequest: PatchDeviceRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deviceApiControllerPatchDevice(networkId, publicKey, patchDeviceRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerRejectDevice(
      networkId: string,
      publicKey: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deviceApiControllerRejectDevice(networkId, publicKey, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {StartBatchRemoteCommandsRequest} startBatchRemoteCommandsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerStartBatchRemoteCommands(
      networkId: string,
      startBatchRemoteCommandsRequest: StartBatchRemoteCommandsRequest,
      options?: any,
    ): AxiosPromise<StartBatchRemoteCommandsResponse> {
      return localVarFp
        .deviceApiControllerStartBatchRemoteCommands(
          networkId,
          startBatchRemoteCommandsRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {StartRemoteCommandRequest} startRemoteCommandRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerStartRemoteCommand(
      networkId: string,
      publicKey: string,
      startRemoteCommandRequest: StartRemoteCommandRequest,
      options?: any,
    ): AxiosPromise<StartRemoteCommandResponse> {
      return localVarFp
        .deviceApiControllerStartRemoteCommand(
          networkId,
          publicKey,
          startRemoteCommandRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} networkId
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceApiControllerStartWebTerminal(
      networkId: string,
      publicKey: string,
      options?: any,
    ): AxiosPromise<StartWebTerminalResponse> {
      return localVarFp
        .deviceApiControllerStartWebTerminal(networkId, publicKey, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerAcceptDevice(
    networkId: string,
    publicKey: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerAcceptDevice(networkId, publicKey, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {CreateDevicePortForwardingRequest} createDevicePortForwardingRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerCreateDevicePortForwarding(
    networkId: string,
    publicKey: string,
    createDevicePortForwardingRequest: CreateDevicePortForwardingRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerCreateDevicePortForwarding(
        networkId,
        publicKey,
        createDevicePortForwardingRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerDeleteDevice(
    networkId: string,
    publicKey: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerDeleteDevice(networkId, publicKey, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {number} devicePort
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerDeleteDevicePortForwarding(
    networkId: string,
    publicKey: string,
    devicePort: number,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerDeleteDevicePortForwarding(networkId, publicKey, devicePort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} batchId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerGetBatchRemoteCommand(
    networkId: string,
    batchId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerGetBatchRemoteCommand(networkId, batchId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerGetDevice(
    networkId: string,
    publicKey: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerGetDevice(networkId, publicKey, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerGetDevicePortForwardings(
    networkId: string,
    publicKey: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerGetDevicePortForwardings(networkId, publicKey, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerGetDeviceSystemInfo(
    networkId: string,
    publicKey: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerGetDeviceSystemInfo(networkId, publicKey, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {string} commandId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerGetRemoteCommandStatus(
    networkId: string,
    publicKey: string,
    commandId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerGetRemoteCommandStatus(networkId, publicKey, commandId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {string} commandId
   * @param {KillRemoteCommandRequest} killRemoteCommandRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerKillRemoteCommand(
    networkId: string,
    publicKey: string,
    commandId: string,
    killRemoteCommandRequest: KillRemoteCommandRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerKillRemoteCommand(
        networkId,
        publicKey,
        commandId,
        killRemoteCommandRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {number} [page] Optional page number
   * @param {number} [pageSize] Optional page size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerListBatchRemoteCommands(
    networkId: string,
    page?: number,
    pageSize?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerListBatchRemoteCommands(networkId, page, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerListDevices(networkId: string, options?: RawAxiosRequestConfig) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerListDevices(networkId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {number} [page] Optional page number
   * @param {number} [pageSize] Optional page size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerListRemoteCommands(
    networkId: string,
    publicKey: string,
    page?: number,
    pageSize?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerListRemoteCommands(networkId, publicKey, page, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {PatchDeviceRequest} patchDeviceRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerPatchDevice(
    networkId: string,
    publicKey: string,
    patchDeviceRequest: PatchDeviceRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerPatchDevice(networkId, publicKey, patchDeviceRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerRejectDevice(
    networkId: string,
    publicKey: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerRejectDevice(networkId, publicKey, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {StartBatchRemoteCommandsRequest} startBatchRemoteCommandsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerStartBatchRemoteCommands(
    networkId: string,
    startBatchRemoteCommandsRequest: StartBatchRemoteCommandsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerStartBatchRemoteCommands(
        networkId,
        startBatchRemoteCommandsRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {StartRemoteCommandRequest} startRemoteCommandRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerStartRemoteCommand(
    networkId: string,
    publicKey: string,
    startRemoteCommandRequest: StartRemoteCommandRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerStartRemoteCommand(
        networkId,
        publicKey,
        startRemoteCommandRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} networkId
   * @param {string} publicKey
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public deviceApiControllerStartWebTerminal(
    networkId: string,
    publicKey: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DevicesApiFp(this.configuration)
      .deviceApiControllerStartWebTerminal(networkId, publicKey, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
