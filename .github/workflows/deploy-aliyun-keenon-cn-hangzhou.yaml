# Since we cannot solve the problem of build failure on self-hosted runners
# we can only build the image on the GitHub runner,
# and then synchronize it to the Alibaba ACR service.
# And this is a way to save self-hosted runner resources.
name: Published Release Img

on:
  release:
    types: [released]

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-20.04
    environment: azure-dev-east-us
    env:
      BUF_TOKEN: ${{ secrets.BUF_TOKEN }}
      GH_PACKAGES_ORG_TOKEN: ${{ secrets.GH_PACKAGES_ORG_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          lfs: true

      - name: Setup CD workspace all in one
        uses: coscene-io/setup-cd-workspace-all-in-one@v1.1.0
        with:
          cloud-provider: Azure
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          acr-login-registry: ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}
          acr-username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          acr-password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
          azure-aks-resource-group: "Dev-EUS"
          azure-aks-cluster-name: "Dev-EUS"
          need-cd-tools: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push images
        id: build-and-push
        run: |
          result=$(skaffold build -q | jq '.builds[0].tag')
          withoutRegistry=${result#*:}
          withoutDigest=${withoutRegistry%@*}
          echo "TAG=${withoutDigest}" >> $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.build-and-push.outputs.TAG }}

  copy-image-to-aliyun:
    runs-on: [self-hosted]
    needs: build
    steps:
      - name: Skopeo Copy
        uses: coscene-io/skopeo-copy-action@v1.0.0
        env:
          http_proxy: http://gfw:7890
          https_proxy: http://gfw:7890
        with:
          src-image: coseus.azurecr.io/honeybee:${{ needs.build.outputs.tag }}
          dst-image: registry.cn-hangzhou.aliyuncs.com/coscene/honeybee:${{ needs.build.outputs.tag }}
          src-creds: ${{ secrets.ACR_ADMIN_USERNAME }}:${{ secrets.ACR_ADMIN_PASSWORD }}
          dst-creds: ${{ secrets.ACR_USERNAME }}:${{ secrets.ACR_PASSWORD }}

  sync-fallback:
    runs-on: ubuntu-latest
    needs: [build, copy-image-to-aliyun]
    if: always()
    steps:
      - name: Skopeo Copy
        if: needs.copy-image-to-aliyun.result == 'failure'
        uses: coscene-io/skopeo-copy-action@v1.0.0
        with:
          src-image: coseus.azurecr.io/honeybee:${{ needs.build.outputs.tag }}
          dst-image: registry.cn-hangzhou.aliyuncs.com/coscene/honeybee:${{ needs.build.outputs.tag }}
          src-creds: ${{ secrets.ACR_ADMIN_USERNAME }}:${{ secrets.ACR_ADMIN_PASSWORD }}
          dst-creds: ${{ secrets.ACR_USERNAME }}:${{ secrets.ACR_PASSWORD }}

  callout:
    runs-on: ubuntu-latest
    needs: [build, copy-image-to-aliyun, sync-fallback]
    steps:
      - name: Add summary
        if: needs.build.result == 'success'
        env:
          tag: ${{ needs.build.outputs.tag }}
        run: |
          echo '## Image Summary :rocket:' >> $GITHUB_STEP_SUMMARY
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME" >> $GITHUB_STEP_SUMMARY
          echo "GITHUB_ACTOR: $GITHUB_ACTOR" >> $GITHUB_STEP_SUMMARY
          echo "GITHUB_REF: $GITHUB_REF" >> $GITHUB_STEP_SUMMARY
          echo "Azure image: coseus.azurecr.io/honeybee:$tag" >> $GITHUB_STEP_SUMMARY
          echo "AliCloud image: registry.cn-hangzhou.aliyuncs.com/coscene/honeybee:$tag" >> $GITHUB_STEP_SUMMARY
      - name: Notification to Feishu
        uses: foxundermoon/feishu-action@v2
        if: needs.build.result == 'success'
        env:
          tag: ${{ needs.build.outputs.tag }}
        with:
          url: ${{ secrets.FEISHU_BOT_WEBHOOK_URL_IMAGE_BROADCAST }}
          msg_type: text
          content: |
            text: |
              A new version of Honeybee Web image has been published to ${{ env.PROFILE }}.
              GitHubEvent: ${{ github.event_name }}
              committer: ${{ github.actor }}
              baseRef: ${{ github.ref }}
              Azure image: coseus.azurecr.io/honeybee:${{ env.tag }}
              AliCloud image: registry.cn-hangzhou.aliyuncs.com/coscene/honeybee:${{ env.tag }}
