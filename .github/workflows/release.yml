name: Publish Studio

permissions:
  contents: write
  attestations: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "Version to publish (e.g., v1.0.0)"
        required: true
      environment:
        type: choice
        description: "publish studio to"
        required: true
        default: "saas"
        options:
          - dev
          - saas
          - portal

env:
  ENV_PREFIX: ${{ github.event.inputs.environment == 'saas' && '' || format('/{0}', github.event.inputs.environment) }}
  CONFIG_FILE_URL: ${{ github.event.inputs.environment == 'saas' && 'https://coscene.cn/cos-config.js' || github.event.inputs.environment == 'potal' && 'https://portal.coscene.io/cos-config.js' || 'https://dev.coscene.cn/cos-config.js' }}

jobs:
  build:
    environment: ${{ github.event.inputs.environment }}

    runs-on: ${{matrix.runs-on}}

    env:
      BUF_BUILD_TOKEN: ${{ secrets.BUF_BUILD_TOKEN }}
      GH_PACKAGES_ORG_TOKEN: ${{ secrets.GH_PACKAGES_ORG_TOKEN }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      COSTUDIO_DOWNLOAD_URL: ${{ vars.COSTUDIO_DOWNLOAD_URL }}

    strategy:
      matrix:
        include:
          - os: win
            runs-on: windows-latest
          - os: darwin
            runs-on: macos-latest
          - os: linux
            runs-on: ubuntu-latest
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Set cos config file
        id: set_cos_config_file
        run: |
          curl ${{ env.CONFIG_FILE_URL }} > packages/studio-desktop/src/public/cos-config.js
          cat packages/studio-desktop/src/public/cos-config.js

      - name: Prepare postinst script
        if: matrix.os == 'linux'
        run: |
          sed "s|%%APT_SOURCE%%|${{ vars.COSTUDIO_APT_SOURCE }}|g" \
            packages/studio-desktop/resources/linux/deb/postinst.template > \
            packages/studio-desktop/resources/linux/deb/postinst

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable corepack
        run: corepack enable yarn

      - name: Install dependencies
        run: yarn install --immutable

      - name: \[bot\] Update version in package.json
        run: yarn run version:all ${{ github.event.inputs.version }}

      - name: Build prod files
        run: |
          yarn run desktop:build:prod

      - name: Build ${{ matrix.os }} version
        run: yarn run package:${{ matrix.os }}

      - name: Upload to OSS
        if: matrix.os == 'darwin'
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_ARTIFACTS_ACCESS_KEY }}
          key-secret: ${{ secrets.OSS_ARTIFACTS_ACCESS_SECRET }}
          region: oss-cn-hangzhou
          bucket: coscene-download
          assets: |
            dist/coStudio-${{ github.event.inputs.version }}-mac-universal.dmg:/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-mac-universal.dmg
            dist/coStudio-${{ github.event.inputs.version }}-mac-universal.dmg.blockmap:/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-mac-universal.dmg.blockmap
            dist/latest-mac.yml:/coStudio${{ env.ENV_PREFIX }}/packages/latest-mac.yml

      - name: Upload to OSS (Windows)
        if: matrix.os == 'win'
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_ARTIFACTS_ACCESS_KEY }}
          key-secret: ${{ secrets.OSS_ARTIFACTS_ACCESS_SECRET }}
          region: oss-cn-hangzhou
          bucket: coscene-download
          assets: |
            dist/coStudio-${{ github.event.inputs.version }}-win.exe:/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-win.exe
            dist/coStudio-${{ github.event.inputs.version }}-win.exe.blockmap:/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-win.exe.blockmap
            dist/coStudio-${{ github.event.inputs.version }}-win-arm64.exe:/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-win-arm64.exe
            dist/coStudio-${{ github.event.inputs.version }}-win-arm64.exe.blockmap:/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-win-arm64.exe.blockmap
            dist/coStudio-${{ github.event.inputs.version }}-win-x64.exe:/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-win-x64.exe
            dist/coStudio-${{ github.event.inputs.version }}-win-x64.exe.blockmap:/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-win-x64.exe.blockmap
            dist/latest.yml:/coStudio${{ env.ENV_PREFIX }}/packages/latest.yml

      - name: Update APT Source
        if: matrix.os == 'linux'
        uses: coscene-io/update-apt-source@test
        with:
          ubuntu_distro: "all"
          deb_paths: |
            dist/coStudio-${{ github.event.inputs.version }}-linux-amd64.deb
            dist/coStudio-${{ github.event.inputs.version }}-linux-arm64.deb
          architectures: |
            amd64
            arm64
          access_key_id: ${{ secrets.OSS_ARTIFACTS_ACCESS_KEY }}
          access_key_secret: ${{ secrets.OSS_ARTIFACTS_ACCESS_SECRET }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

  # notification:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Notification to Feishu
  #       id: feishu
  #       uses: foxundermoon/feishu-action@v2
  #       with:
  #         url: ${{ secrets.FEISHU_BOT_WEBHOOK_URL_STUDIO_RELEASE }}
  #         msg_type: text
  #         content: |
  #           text: |
  #             A new version of coScene Studio has been published.
  #             Version: ${{ github.event.inputs.version }}
  #             Environment: ${{ github.event.inputs.environment }}
  #             Download:
  #               mac:
  #                 https://coscene-download.oss-cn-hangzhou.aliyuncs.com/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-mac-universal.dmg
  #               win:
  #                 https://coscene-download.oss-cn-hangzhou.aliyuncs.com/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-win.exe
  #                 https://coscene-download.oss-cn-hangzhou.aliyuncs.com/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-win-arm64.exe
  #                 https://coscene-download.oss-cn-hangzhou.aliyuncs.com/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-win-x64.exe
  #               linux:
  #                 https://coscene-download.oss-cn-hangzhou.aliyuncs.com/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-linux-amd64.deb
  #                 https://coscene-download.oss-cn-hangzhou.aliyuncs.com/coStudio${{ env.ENV_PREFIX }}/packages/coStudio-${{ github.event.inputs.version }}-linux-arm64.deb
  #             Release notes: https://github.com/coscene-io/honeybee/releases
